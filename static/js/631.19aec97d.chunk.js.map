{"version":3,"file":"static/js/631.19aec97d.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactList/ContactItem/ContactItem.module.css?7ce2","components/ContactList/ContactItem/ContactItem.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/components/Apx.module.css?a6e7","components/PhoneBook/PhoneBook.jsx","webpack://react-homework-template/./src/components/ScreenSaver/ScreenSaver.module.css?69f8","components/ScreenSaver/ScreenSaver.jsx","pages/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contactItem\":\"ContactItem_contactItem__aUSMv\",\"contactName\":\"ContactItem_contactName__zpIwE\",\"contactNumber\":\"ContactItem_contactNumber__5zn6-\"};","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport style from 'components/ContactList/ContactItem/ContactItem.module.css';\nimport Proptypes from 'prop-types';\nimport { deleteContact } from 'redux/operations';\n\nexport const ContactItem = ({ name, number, itemId }) => {\n  const dispatch = useDispatch();\n\n  const handleContactDelete = id => {\n    dispatch(deleteContact(id));\n\n  };\n  \n  return (\n    <li className={style.contactItem} key={itemId}>\n      <span className={style.contactName}>{name}:</span>\n      <span className={style.contactNumber}>{number}</span>\n      <button type=\"button\" onClick={() => handleContactDelete(itemId)}>\n        Delete\n      </button>\n    </li>\n  );\n};\n\nContactItem.propTypes = {\n  name: Proptypes.string.isRequired,\n  number: Proptypes.string.isRequired,\n  itemId: Proptypes.string,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__UFVCg\",\"contactListContainer\":\"ContactList_contactListContainer__Mco5m\"};","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { filteredContacts } from 'redux/selectors';\nimport { ContactItem } from 'components/ContactList/ContactItem/ContactItem';\nimport style from 'components/ContactList/ContactList.module.css';\n\nexport const ContactList = () => {\n  const contacts = useSelector(filteredContacts);\n\n  return (\n    <ul className={style.contactList}>\n      {contacts.map(contact => (\n        <ContactItem\n          name={contact.name}\n          number={contact.number}\n          itemId={contact.id}\n          key={contact.id}\n        />\n      ))}\n    </ul>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contactForm\":\"ContactForm_contactForm__y0Rca\",\"contactFormHeader\":\"ContactForm_contactFormHeader__gURbL\",\"contactInput\":\"ContactForm_contactInput__z6XOX\",\"contactButton\":\"ContactForm_contactButton__jSKp4\"};","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport style from 'components/ContactForm/ContactForm.module.css';\nimport { addContact } from 'redux/operations';\nimport { toast } from 'react-toastify';\nimport { selectContacts } from 'redux/selectors';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (name.trim() === '' || number.trim() === '') {\n      toast.error('Please fill in all fields');\n      return;\n    }\n    const isInContacts = contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n    if (isInContacts) {\n      toast.error(`${name} is on contacts`);\n\n      return;\n    }\n\n    dispatch(addContact({ name, number }));\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={style.contactForm} onSubmit={handleSubmit}>\n      <h1 className={style.contactFormHeader}>Phonebook</h1>\n      <input\n        className={style.contactInput}\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        onChange={handleChange}\n        placeholder=\"Name\"\n      />\n      <input\n        className={style.contactInput}\n        type=\"tel\"\n        name=\"number\"\n        value={number}\n        onChange={handleChange}\n        placeholder=\"Phone number\"\n      />\n      <button className={style.contactButton} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n","import React from 'react';\nimport { nanoid } from 'nanoid';\nimport { selectFilter } from 'redux/selectors';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/contactsReducer';\n\nexport const Filter = () => {\n  const value = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  const handleFilterChange = event => {\n    dispatch(setFilter(event.target.value));\n  };\n  const inputId = nanoid(10);\n  return (\n    <div>\n      <label htmlFor=\"\" id={inputId}>\n        Find filter by name\n      </label>\n      <input\n        type=\"text\"\n        value={value}\n        id={inputId}\n        onChange={handleFilterChange}\n      />\n    </div>\n  );\n};\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Apx_container__ucoVh\"};","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { fetchContacts } from 'redux/operations';\nimport { Loader } from 'components/Loader/Loader';\nimport { selectContacts, selectLoading } from 'redux/selectors';\nimport style from 'components/Apx.module.css';\n\nconst PhoneBook = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div className={style.container}>\n      <ContactForm />\n      <h2>Contacts</h2>\n      {isLoading && <Loader />}\n      {contacts.length > 0 ? (\n        <Filter />\n      ) : (\n        <p>Your phonebook is empty. Add first contact!</p>\n      )}\n      {contacts.length > 0 && <ContactList />}\n    </div>\n  );\n};\n\nexport default PhoneBook;\n","// extracted by mini-css-extract-plugin\nexport default {\"main_container\":\"ScreenSaver_main_container__rGLr4\",\"title\":\"ScreenSaver_title__zlKNn\"};","import React from 'react';\nimport style from 'components/ScreenSaver/ScreenSaver.module.css';\n\nconst ScreenSaver = () => {\n  return (\n    <>\n      <h1 className={style.title}>\n        Phonebook welcome page{' '}\n        <span role=\"img\" aria-label=\"Greeting icon\">\n          💁‍♀️\n        </span>\n      </h1>\n      <div className={style.main_container}>\n        <p>Please register or log in</p>\n      </div>\n    </>\n  );\n};\n\nexport default ScreenSaver;\n","import PhoneBook from 'components/PhoneBook/PhoneBook';\nimport ScreenSaver from 'components/ScreenSaver/ScreenSaver';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectUserData } from 'redux/selectors';\n\nconst Contacts = () => {\n  const profile = useSelector(selectUserData);\n\n  return <div>{profile ? <PhoneBook /> : <ScreenSaver />}</div>;\n};\n\nexport default Contacts;\n"],"names":["ContactItem","name","number","itemId","dispatch","useDispatch","className","style","type","onClick","id","deleteContact","ContactList","contacts","useSelector","filteredContacts","map","contact","ContactForm","useState","setName","setNumber","selectContacts","handleChange","e","currentTarget","value","reset","onSubmit","preventDefault","trim","find","toLowerCase","toast","addContact","onChange","placeholder","Filter","selectFilter","inputId","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","nanoid","htmlFor","event","setFilter","target","isLoading","selectLoading","useEffect","fetchContacts","Loader","length","role","profile","selectUserData"],"sourceRoot":""}