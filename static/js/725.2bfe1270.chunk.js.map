{"version":3,"file":"static/js/725.2bfe1270.chunk.js","mappings":"4MAEIA,G,QAAY,aAgFT,IAAIC,EAAuB,SAA8BC,EAAGC,GACjE,OAAOD,IAAMC,CACd,EAqBM,SAASC,EAAeC,EAAMC,GACnC,IAAIC,EAAoD,kBAA3BD,EAAsCA,EAAyB,CAC1FE,cAAeF,GAEbG,EAAwBF,EAAgBC,cACxCA,OAA0C,IAA1BC,EAAmCR,EAAuBQ,EAC1EC,EAAwBH,EAAgBI,QACxCA,OAAoC,IAA1BD,EAAmC,EAAIA,EACjDE,EAAsBL,EAAgBK,oBACtCC,EA7BC,SAAkCL,GACvC,OAAO,SAAoCM,EAAMC,GAC/C,GAAa,OAATD,GAA0B,OAATC,GAAiBD,EAAKE,SAAWD,EAAKC,OACzD,OAAO,EAMT,IAFA,IAAIA,EAASF,EAAKE,OAETC,EAAI,EAAGA,EAAID,EAAQC,IAC1B,IAAKT,EAAcM,EAAKG,GAAIF,EAAKE,IAC/B,OAAO,EAIX,OAAO,CACR,CACF,CAYkBC,CAAyBV,GACtCW,EAAoB,IAAZR,EA/Gd,SAA8BS,GAC5B,IAAIC,EACJ,MAAO,CACLC,IAAK,SAAaC,GAChB,OAAIF,GAASD,EAAOC,EAAME,IAAKA,GACtBF,EAAMG,MAGRxB,CACR,EACDyB,IAAK,SAAaF,EAAKC,GACrBH,EAAQ,CACNE,IAAKA,EACLC,MAAOA,EAEV,EACDE,WAAY,WACV,OAAOL,EAAQ,CAACA,GAAS,EAC1B,EACDM,MAAO,WACLN,OAAQO,CACT,EAEJ,CAwF6BC,CAAqBhB,GAtFnD,SAAwBF,EAASS,GAC/B,IAAIU,EAAU,GAEd,SAASR,EAAIC,GACX,IAAIQ,EAAaD,EAAQE,WAAU,SAAUX,GAC3C,OAAOD,EAAOG,EAAKF,EAAME,IAC1B,IAED,GAAIQ,GAAc,EAAG,CACnB,IAAIV,EAAQS,EAAQC,GAOpB,OALIA,EAAa,IACfD,EAAQG,OAAOF,EAAY,GAC3BD,EAAQI,QAAQb,IAGXA,EAAMG,KACd,CAGD,OAAOxB,CACR,CAwBD,MAAO,CACLsB,IAAKA,EACLG,IAxBF,SAAaF,EAAKC,GACZF,EAAIC,KAASvB,IAEf8B,EAAQI,QAAQ,CACdX,IAAKA,EACLC,MAAOA,IAGLM,EAAQd,OAASL,GACnBmB,EAAQK,MAGb,EAaCT,WAXF,WACE,OAAOI,CACR,EAUCH,MARF,WACEG,EAAU,EACX,EAQF,CAmCgEM,CAAezB,EAASE,GAEvF,SAASwB,IACP,IAAIb,EAAQL,EAAMG,IAAIgB,WAEtB,GAAId,IAAUxB,EAAW,CAIvB,GAFAwB,EAAQnB,EAAKkC,MAAM,KAAMD,WAErB1B,EAAqB,CACvB,IAAIkB,EAAUX,EAAMO,aAChBc,EAAgBV,EAAQW,MAAK,SAAUpB,GACzC,OAAOT,EAAoBS,EAAMG,MAAOA,EACzC,IAEGgB,IACFhB,EAAQgB,EAAchB,MAEzB,CAEDL,EAAMM,IAAIa,UAAWd,EACtB,CAED,OAAOA,CACR,CAMD,OAJAa,EAASK,WAAa,WACpB,OAAOvB,EAAMQ,OACd,EAEMU,CACR,CC/ID,SAASM,EAAgBC,GACvB,IAAIC,EAAeC,MAAMC,QAAQH,EAAM,IAAMA,EAAM,GAAKA,EAExD,IAAKC,EAAaG,OAAM,SAAUC,GAChC,MAAsB,oBAARA,CACf,IAAG,CACF,IAAIC,EAAkBL,EAAaM,KAAI,SAAUF,GAC/C,MAAsB,oBAARA,EAAqB,aAAeA,EAAIG,MAAQ,WAAa,YAAcH,CAC1F,IAAEI,KAAK,MACR,MAAM,IAAIC,MAAM,kGAAoGJ,EAAkB,IACvI,CAED,OAAOL,CACR,CAEM,SAASU,EAAsBC,GACpC,IAAK,IAAIC,EAAOnB,UAAUtB,OAAQ0C,EAAyB,IAAIZ,MAAMW,EAAO,EAAIA,EAAO,EAAI,GAAIE,EAAO,EAAGA,EAAOF,EAAME,IACpHD,EAAuBC,EAAO,GAAKrB,UAAUqB,GAG/C,IAAIC,EAAiB,WACnB,IAAK,IAAIC,EAAQvB,UAAUtB,OAAQ4B,EAAQ,IAAIE,MAAMe,GAAQC,EAAQ,EAAGA,EAAQD,EAAOC,IACrFlB,EAAMkB,GAASxB,UAAUwB,GAG3B,IAEIC,EAFAC,EAAkB,EAOlBC,EAAwB,CAC1BC,oBAAgBtC,GAGduC,EAAavB,EAAMT,MAQvB,GAN0B,kBAAfgC,IACTF,EAAwBE,EAExBA,EAAavB,EAAMT,OAGK,oBAAfgC,EACT,MAAM,IAAIb,MAAM,qFAAuFa,EAAa,KAKtH,IAAIC,EAAwBH,EACxBI,EAAyBD,EAAsBF,eAC/CA,OAA4C,IAA3BG,EAAoCX,EAAyBW,EAM9EC,EAAsBxB,MAAMC,QAAQmB,GAAkBA,EAAiB,CAACA,GACxErB,EAAeF,EAAgBC,GAC/B2B,EAAqBf,EAAQjB,WAAM,EAAQ,CAAC,WAG9C,OAFAyB,IAEOG,EAAW5B,MAAM,KAAMD,UAC/B,GAAEkC,OAAOF,IAENG,EAAWjB,GAAQ,WAIrB,IAHA,IAAIkB,EAAS,GACT1D,EAAS6B,EAAa7B,OAEjBC,EAAI,EAAGA,EAAID,EAAQC,IAG1ByD,EAAOC,KAAK9B,EAAa5B,GAAGsB,MAAM,KAAMD,YAK1C,OADAyB,EAAcQ,EAAmBhC,MAAM,KAAMmC,EAE9C,IAeD,OAdAE,OAAOC,OAAOJ,EAAU,CACtBN,WAAYA,EACZI,mBAAoBA,EACpB1B,aAAcA,EACdiC,WAAY,WACV,OAAOf,CACR,EACDgB,eAAgB,WACd,OAAOf,CACR,EACDgB,oBAAqB,WACnB,OAAOhB,EAAkB,CAC1B,IAEIS,CACR,EAGD,OAAOb,CACR,CACM,IAAIA,EAAgCL,EAAsBnD,GCrGpD6E,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EACtBC,EAAe,SAAAH,GAAK,OAAIA,EAAMI,MAAV,EAKpBC,EAAmB3B,EAC9B,CAACqB,EAAgBI,IACjB,SAACF,EAAUG,GACT,OAAOH,EAASG,QAAO,SAAAE,GAAO,OAC5BA,EAAQpC,KAAKqC,cAAcC,SAASJ,EAAOG,cADf,GAG/B,ICbH,EAA8B,iCAA9B,EAA6E,iCAA7E,EAA8H,mC,kBCKjHE,EAAc,SAAC,GAA8B,IAA5BvC,EAA2B,EAA3BA,KAAMwC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,OACpCC,GAAWC,EAAAA,EAAAA,MAOjB,OACE,gBAAIC,UAAWC,EAAf,WACE,kBAAMD,UAAWC,EAAjB,UAAqC7C,EAAK,QAC1C,iBAAM4C,UAAWC,EAAjB,SAAuCL,KACvC,mBAAQM,KAAK,SAASC,QAAS,kBATPC,EASiCP,OAR3DC,GAASO,EAAAA,EAAAA,IAAcD,IADG,IAAAA,CASO,EAA/B,SAAkE,aAH7BP,EAQ1C,ECtBD,EAA8B,iCCMjBS,EAAc,WACzB,IAAMnB,GAAWoB,EAAAA,EAAAA,IAAYhB,GAE7B,OACE,eAAIS,UAAWC,EAAf,SACGd,EAAShC,KAAI,SAAAqC,GAAO,OACnB,SAACG,EAAD,CACEvC,KAAMoC,EAAQpC,KACdwC,OAAQJ,EAAQI,OAChBC,OAAQL,EAAQY,IACXZ,EAAQY,GALI,KAU1B,E,UCrBD,EAA8B,iCAA9B,EAAmF,uCAAnF,EAAyI,kCAAzI,EAA2L,mC,UCM9KI,EAAc,WACzB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOrD,EAAP,KAAasD,EAAb,KACA,GAA4BD,EAAAA,EAAAA,UAAS,IAArC,eAAOb,EAAP,KAAee,EAAf,KACMb,GAAWC,EAAAA,EAAAA,MAEXa,GAAgBL,EAAAA,EAAAA,IAAYtB,GAE5B4B,EAAe,SAAAC,GACnB,MAAwBA,EAAEC,cAAlB3D,EAAR,EAAQA,KAAM5B,EAAd,EAAcA,MACD,SAAT4B,EACFsD,EAAQlF,GACU,WAAT4B,GACTuD,EAAUnF,EAEb,EAuBKwF,EAAQ,WACZN,EAAQ,IACRC,EAAU,GACX,EAED,OACE,kBAAMX,UAAWC,EAAmBgB,SA3BjB,SAAAH,GAErB,GADAA,EAAEI,iBACkB,KAAhB9D,EAAK+D,QAAmC,KAAlBvB,EAAOuB,OAAjC,CAIA,IAAM3B,EAAU,CAAEpC,KAAAA,EAAMwC,OAAAA,GACAgB,EAAcnE,MACpC,SAAA2E,GAAI,OAAIA,EAAKhE,KAAKqC,gBAAkBD,EAAQpC,KAAKqC,aAA7C,IAIJ4B,EAAAA,GAAAA,MAAY,gDAKdvB,GAASwB,EAAAA,EAAAA,IAAW9B,IACpBwB,IAbC,MAFCK,EAAAA,GAAAA,MAAY,4BAgBf,EAQG,WACE,eAAIrB,UAAWC,EAAf,SAAwC,eACxC,kBACED,UAAWC,EACXC,KAAK,OACL9C,KAAK,OACL5B,MAAO4B,EACPmE,SAAUV,EACVW,YAAY,UAEd,kBACExB,UAAWC,EACXC,KAAK,MACL9C,KAAK,SACL5B,MAAOoE,EACP2B,SAAUV,EACVW,YAAY,kBAEd,mBAAQxB,UAAWC,EAAqBC,KAAK,SAA7C,SAAsD,kBAK3D,E,UCnEYuB,EAAS,WACpB,IAAMjG,GAAQ+E,EAAAA,EAAAA,IAAYlB,GACpBS,GAAWC,EAAAA,EAAAA,MAIX2B,ECOK,WAGX,IAH0B,IAAdC,EAAc,uDAAP,GACfvB,EAAK,GACLwB,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWJ,IAC3CA,KAAQ,CACb,IAAIK,EAAqB,GAAdJ,EAAMD,GAEfvB,GADE4B,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAET,CACD,OAAO5B,CACR,CDvBiB+B,CAAO,IACvB,OACE,4BACE,kBAAOC,QAAQ,GAAGhC,GAAIsB,EAAtB,SAA+B,yBAG/B,kBACExB,KAAK,OACL1E,MAAOA,EACP4E,GAAIsB,EACJH,SAbqB,SAAAc,GACzBvC,GAASwC,EAAAA,EAAAA,GAAUD,EAAME,OAAO/G,OACjC,MAeF,E,UEzBD,EAA4B,uB,UCkC5B,EAvBkB,WAChB,IAAMsE,GAAWC,EAAAA,EAAAA,MACTZ,EAAwBqD,EAAAA,EAAAA,SAAdC,EAAcD,EAAAA,EAAAA,UAMhC,OAJAE,EAAAA,EAAAA,YAAU,WACR5C,GAAS6C,EAAAA,EAAAA,MACV,GAAE,CAAC7C,KAGF,iBAAKE,UAAWC,EAAhB,WACE,SAACO,EAAD,KACA,wBAAI,aACHiC,IAAa,SAACG,EAAA,EAAD,IACbzD,EAASC,MAAMpE,OAAS,GACvB,SAACyG,EAAD,KAEA,uBAAG,gDAEJtC,EAASC,MAAMpE,OAAS,IAAK,SAACsF,EAAD,MAGnC,EChCD,EAAiC,oCAAjC,EAA6E,2BCkB7E,EAhBoB,WAClB,OACE,iCACE,gBAAIN,UAAWC,EAAf,UAA4B,yBACH,KACvB,iBAAM4C,KAAK,MAAM,aAAW,gBAA5B,SAA4C,uCAI9C,gBAAK7C,UAAWC,EAAhB,UACE,uBAAG,kCAIV,E,UCND,EANkB,WAChB,IAAQ6C,EAAYC,EAAAA,GAAAA,QAEpB,OAAO,yBAAMD,GAAU,SAAC,EAAD,KAAgB,SAAC,EAAD,KACxC,C","sources":["../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js","redux/selectors.js","webpack://react-homework-template/./src/components/ContactList/ContactItem/ContactItem.module.css?7ce2","components/ContactList/ContactItem/ContactItem.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/components/Apx.module.css?a6e7","components/PhoneBook/PhoneBook.jsx","webpack://react-homework-template/./src/components/ScreenSaver/ScreenSaver.module.css?69f8","components/ScreenSaver/ScreenSaver.jsx","pages/Phonebook.jsx"],"sourcesContent":["// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function dependenciesChecker() {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.filter;\nexport const selectName = state => state.name;\nexport const selectNumber = state => state.number;\nexport const selectState = state => state;\n\nexport const filteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"contactItem\":\"ContactItem_contactItem__aUSMv\",\"contactName\":\"ContactItem_contactName__zpIwE\",\"contactNumber\":\"ContactItem_contactNumber__5zn6-\"};","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport style from 'components/ContactList/ContactItem/ContactItem.module.css';\nimport Proptypes from 'prop-types';\nimport { deleteContact } from 'redux/operations';\n\nexport const ContactItem = ({ name, number, itemId }) => {\n  const dispatch = useDispatch();\n\n  const handleContactDelete = id => {\n    dispatch(deleteContact(id));\n\n  };\n  \n  return (\n    <li className={style.contactItem} key={itemId}>\n      <span className={style.contactName}>{name}:</span>\n      <span className={style.contactNumber}>{number}</span>\n      <button type=\"button\" onClick={() => handleContactDelete(itemId)}>\n        Delete\n      </button>\n    </li>\n  );\n};\n\nContactItem.propTypes = {\n  name: Proptypes.string.isRequired,\n  number: Proptypes.string.isRequired,\n  itemId: Proptypes.string,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__UFVCg\",\"contactListContainer\":\"ContactList_contactListContainer__Mco5m\"};","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { filteredContacts } from 'redux/selectors';\nimport { ContactItem } from 'components/ContactList/ContactItem/ContactItem';\nimport style from 'components/ContactList/ContactList.module.css';\n\nexport const ContactList = () => {\n  const contacts = useSelector(filteredContacts);\n\n  return (\n    <ul className={style.contactList}>\n      {contacts.map(contact => (\n        <ContactItem\n          name={contact.name}\n          number={contact.number}\n          itemId={contact.id}\n          key={contact.id}\n        />\n      ))}\n    </ul>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contactForm\":\"ContactForm_contactForm__y0Rca\",\"contactFormHeader\":\"ContactForm_contactFormHeader__gURbL\",\"contactInput\":\"ContactForm_contactInput__z6XOX\",\"contactButton\":\"ContactForm_contactButton__jSKp4\"};","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport style from 'components/ContactForm/ContactForm.module.css';\nimport { addContact } from 'redux/operations';\nimport { toast } from 'react-toastify';\nimport { selectContacts } from 'redux/selectors';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n\n  const contactsItems = useSelector(selectContacts);\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    if (name === 'name') {\n      setName(value);\n    } else if (name === 'number') {\n      setNumber(value);\n    }\n  };\n\n  const handleSubmit = e => {\n  e.preventDefault();\n  if (name.trim() === '' || number.trim() === '') {\n    toast.error('Please fill in all fields');\n    return;\n  }\n  const contact = { name, number };\n  const existingContact = contactsItems.find(\n    item => item.name.toLowerCase() === contact.name.toLowerCase()\n  );\n\n  if (existingContact) {\n    toast.error('The contact is already in the contact book!');\n    return;\n  }\n\n  \n  dispatch(addContact(contact));\n  reset();\n};\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={style.contactForm} onSubmit={handleSubmit}>\n      <h1 className={style.contactFormHeader}>Phonebook</h1>\n      <input\n        className={style.contactInput}\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        onChange={handleChange}\n        placeholder=\"Name\"\n      />\n      <input\n        className={style.contactInput}\n        type=\"tel\"\n        name=\"number\"\n        value={number}\n        onChange={handleChange}\n        placeholder=\"Phone number\"\n      />\n      <button className={style.contactButton} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n","import React from 'react';\nimport { nanoid } from 'nanoid';\nimport { selectFilter } from 'redux/selectors';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/contactsReducer';\n\nexport const Filter = () => {\n  const value = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  const handleFilterChange = event => {\n    dispatch(setFilter(event.target.value));\n  };\n  const inputId = nanoid(10);\n  return (\n    <div>\n      <label htmlFor=\"\" id={inputId}>\n        Find filter by name\n      </label>\n      <input\n        type=\"text\"\n        value={value}\n        id={inputId}\n        onChange={handleFilterChange}\n      />\n    </div>\n  );\n};\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Apx_container__ucoVh\"};","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { fetchContacts } from 'redux/operations';\nimport { Loader } from 'components/Loader/Loader';\nimport style from 'components/Apx.module.css';\nimport { initialState } from 'redux/initialState';\n\nconst PhoneBook = () => {\n  const dispatch = useDispatch();\n  const { contacts, isLoading } = initialState;\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div className={style.container}>\n      <ContactForm />\n      <h2>Contacts</h2>\n      {isLoading && <Loader />}\n      {contacts.items.length > 0 ? (\n        <Filter />\n      ) : (\n        <p>Your phonebook is empty. Add first contact!</p>\n      )}\n      {contacts.items.length > 0 && <ContactList />}\n    </div>\n  );\n};\n\nexport default PhoneBook;\n","// extracted by mini-css-extract-plugin\nexport default {\"main_container\":\"ScreenSaver_main_container__rGLr4\",\"title\":\"ScreenSaver_title__zlKNn\"};","import React from 'react';\nimport style from 'components/ScreenSaver/ScreenSaver.module.css';\n\nconst ScreenSaver = () => {\n  return (\n    <>\n      <h1 className={style.title}>\n        Phonebook welcome page{' '}\n        <span role=\"img\" aria-label=\"Greeting icon\">\n          💁‍♀️\n        </span>\n      </h1>\n      <div className={style.main_container}>\n        <p>Please register or log in</p>\n      </div>\n    </>\n  );\n};\n\nexport default ScreenSaver;\n","import PhoneBook from 'components/PhoneBook/PhoneBook';\nimport ScreenSaver from 'components/ScreenSaver/ScreenSaver';\nimport React from 'react';\nimport { authState } from 'redux/authReduser';\n\nconst Phonebook = () => {\n  const { profile } = authState;\n\n  return <div>{profile ? <PhoneBook /> : <ScreenSaver />}</div>;\n};\n\nexport default Phonebook;\n"],"names":["NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","length","i","createCacheKeyComparator","cache","equals","entry","get","key","value","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","find","clearCache","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","map","name","join","Error","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","createSelector","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","concat","selector","params","push","Object","assign","lastResult","recomputations","resetRecomputations","selectContacts","state","contacts","items","selectFilter","filter","filteredContacts","contact","toLowerCase","includes","ContactItem","number","itemId","dispatch","useDispatch","className","style","type","onClick","id","deleteContact","ContactList","useSelector","ContactForm","useState","setName","setNumber","contactsItems","handleChange","e","currentTarget","reset","onSubmit","preventDefault","trim","item","toast","addContact","onChange","placeholder","Filter","inputId","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","nanoid","htmlFor","event","setFilter","target","initialState","isLoading","useEffect","fetchContacts","Loader","role","profile","authState"],"sourceRoot":""}